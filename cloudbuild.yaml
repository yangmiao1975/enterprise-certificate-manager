substitutions:
  _REGION: us-central1
  _BACKEND_SERVICE: certificate-manager-api
  _FRONTEND_SERVICE: certificate-manager-frontend

steps:
  # Access secrets from Secret Manager
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'fetch-secrets'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud secrets versions access latest --secret="certificate-manager-jwt-secret" > jwt_secret.txt
        gcloud secrets versions access latest --secret="certificate-manager-database-url" > database_url.txt
        gcloud secrets versions access latest --secret="certificate-manager-gemini-api-key" > gemini_api_key.txt

  # Install dependencies and build backend with Node.js 20
  - name: 'node:20-alpine'
    id: 'build-backend'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        cd backend
        npm ci --only=production
        npm run build
    env:
      - 'NODE_ENV=production'

  # Frontend build is now done in Docker step with build args

  # Build and push backend image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/${_BACKEND_SERVICE}:latest', '-f', 'backend/Dockerfile', 'backend/']
    waitFor: ['build-backend']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/${_BACKEND_SERVICE}:latest']

  # Build and push frontend image
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'build', 
      '-t', 'gcr.io/$PROJECT_ID/${_FRONTEND_SERVICE}:latest', 
      '--build-arg', 'VITE_API_URL=https://certificate-manager-api-zvamulkqqq-uc.a.run.app',
      '--build-arg', 'VITE_ENVIRONMENT=gcp-cloud-run',
      '--build-arg', 'VITE_GEMINI_API_KEY=$(cat gemini_api_key.txt)',
      '-f', 'frontend/Dockerfile', 
      'frontend/'
    ]
    waitFor: ['fetch-secrets']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/${_FRONTEND_SERVICE}:latest']

  # Deploy backend to Cloud Run with secrets
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      [
        'run', 'deploy', '${_BACKEND_SERVICE}',
        '--image', 'gcr.io/$PROJECT_ID/${_BACKEND_SERVICE}:latest',
        '--platform', 'managed',
        '--region', '${_REGION}',
        '--allow-unauthenticated',
        '--port', '8080',
        '--memory', '1Gi',
        '--cpu', '2',
        '--add-cloudsql-instances', 'enterprise-certificate-mgmt:us-central1:certificate-manager-db',
        '--set-env-vars', 'NODE_ENV=production,DATABASE_PROVIDER=gcp-cloudsql,CLOUDSQL_CONNECTION_NAME=enterprise-certificate-mgmt:us-central1:certificate-manager-db,CLOUDSQL_HOST=/cloudsql/enterprise-certificate-mgmt:us-central1:certificate-manager-db,CLOUDSQL_PORT=5432,CLOUDSQL_USERNAME=cert_manager_app,CLOUDSQL_DATABASE=certificate_manager,CORS_ORIGIN=https://certificate-manager-frontend-1044697249626.us-central1.run.app,FRONTEND_URL=https://certificate-manager-frontend-1044697249626.us-central1.run.app,GOOGLE_CALLBACK_URL=https://certificate-manager-api-zvamulkqqq-uc.a.run.app/api/auth/google/callback,USE_SECRET_MANAGER_PASSWORDS=true,SECRET_MANAGER_PROVIDER=gcp',
        '--set-secrets', 'CLOUDSQL_PASSWORD=certificate-manager-db-password:latest,JWT_SECRET=certificate-manager-jwt-secret:latest,GEMINI_API_KEY=certificate-manager-gemini-api-key:latest,GOOGLE_CLIENT_ID=certificate-manager-google-client-id:latest,GOOGLE_CLIENT_SECRET=certificate-manager-google-client-secret:latest',
        '--service-account', '1044697249626-compute@developer.gserviceaccount.com'
      ]

  # Deploy frontend to Cloud Run with health check timeout
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      [
        'run', 'deploy', '${_FRONTEND_SERVICE}',
        '--image', 'gcr.io/$PROJECT_ID/${_FRONTEND_SERVICE}:latest',
        '--platform', 'managed',
        '--region', '${_REGION}',
        '--allow-unauthenticated',
        '--port', '80',
        '--memory', '256Mi',
        '--cpu', '0.5',
        '--timeout', '300',
        '--service-account', '1044697249626-compute@developer.gserviceaccount.com'
      ]

timeout: 1200s

options:
  logging: CLOUD_LOGGING_ONLY 