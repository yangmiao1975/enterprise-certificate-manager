substitutions:
  _REGION: us-central1
  _BACKEND_SERVICE: certificate-manager-api
  _FRONTEND_SERVICE: certificate-manager-frontend

steps:
  # Access secrets from Secret Manager
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'fetch-secrets'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud secrets versions access latest --secret="certificate-manager-jwt-secret" > jwt_secret.txt
        gcloud secrets versions access latest --secret="certificate-manager-database-url" > database_url.txt
        gcloud secrets versions access latest --secret="certificate-manager-gemini-api-key" > gemini_api_key.txt

  # Build and push backend image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/${_BACKEND_SERVICE}:$SHORT_SHA', '-f', 'backend/Dockerfile', 'backend/']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/${_BACKEND_SERVICE}:$SHORT_SHA']

  # Build and push frontend image with build args
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        GEMINI_API_KEY=$(cat gemini_api_key.txt)
        docker build \
          -t gcr.io/$PROJECT_ID/${_FRONTEND_SERVICE}:$SHORT_SHA \
          -f frontend/Dockerfile \
          --build-arg VITE_API_URL=https://certificate-manager-api-1044697249626.us-central1.run.app \
          --build-arg VITE_ENVIRONMENT=gcp-cloud-run \
          --build-arg BUILD_MODE=docker \
          --build-arg VITE_GEMINI_API_KEY="$$GEMINI_API_KEY" \
          frontend/
    waitFor: ['fetch-secrets']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/${_FRONTEND_SERVICE}:$SHORT_SHA']

  # Deploy backend to Cloud Run with secrets
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      [
        'run', 'deploy', '${_BACKEND_SERVICE}',
        '--image', 'gcr.io/$PROJECT_ID/${_BACKEND_SERVICE}:$SHORT_SHA',
        '--platform', 'managed',
        '--region', '${_REGION}',
        '--allow-unauthenticated',
        '--port', '8080',
        '--memory', '512Mi',
        '--cpu', '1',
        '--set-env-vars', 'NODE_ENV=production,CORS_ORIGIN=https://certificate-manager-frontend-1044697249626.us-central1.run.app,FRONTEND_URL=https://certificate-manager-frontend-1044697249626.us-central1.run.app,GOOGLE_CALLBACK_URL=https://certificate-manager-api-1044697249626.us-central1.run.app/api/auth/google/callback',
        '--set-secrets', 'JWT_SECRET=certificate-manager-jwt-secret:latest,DATABASE_URL=certificate-manager-database-url:latest,GEMINI_API_KEY=certificate-manager-gemini-api-key:latest,GOOGLE_CLIENT_ID=certificate-manager-google-client-id:latest,GOOGLE_CLIENT_SECRET=certificate-manager-google-client-secret:latest',
        '--service-account', '1044697249626-compute@developer.gserviceaccount.com'
      ]

  # Deploy frontend to Cloud Run with health check timeout
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      [
        'run', 'deploy', '${_FRONTEND_SERVICE}',
        '--image', 'gcr.io/$PROJECT_ID/${_FRONTEND_SERVICE}:$SHORT_SHA',
        '--platform', 'managed',
        '--region', '${_REGION}',
        '--allow-unauthenticated',
        '--port', '80',
        '--memory', '256Mi',
        '--cpu', '0.5',
        '--timeout', '300',
        '--service-account', '1044697249626-compute@developer.gserviceaccount.com'
      ]

timeout: 1200s

options:
  logging: CLOUD_LOGGING_ONLY 